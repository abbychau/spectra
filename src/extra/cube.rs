use luminance::tess::{Mode, Tess, TessVertices};

/// Cube’s vertex type – (position, normal, texture coordinates).
pub type Vertex = ([f32; 3], [f32; 3], [f32; 2]);

/// A unit cube.
///
///     ×-----×
///    /|    /|
///   ×-+---× |
///   | ×---+-×
///   |/    |/
///   ×-----×
pub fn new_cube() -> Tess<Vertex> {
  let vertices = [
    // front face
    ([ 1., -1.,  1.], [ 0.,  0.,  1.], [1., 0.]), // 0
    ([ 1.,  1.,  1.], [ 0.,  0.,  1.], [1., 1.]),
    ([-1., -1.,  1.], [ 0.,  0.,  1.], [0., 0.]),
    ([-1.,  1.,  1.], [ 0.,  0.,  1.], [0., 1.]),
    // back face
    ([ 1., -1., -1.], [ 0.,  0., -1.], [1., 0.]), // 4
    ([ 1.,  1., -1.], [ 0.,  0., -1.], [1., 1.]),
    ([-1., -1., -1.], [ 0.,  0., -1.], [0., 0.]),
    ([-1.,  1., -1.], [ 0.,  0., -1.], [0., 1.]),
    // left face
    ([-1., -1.,  1.], [-1.,  0.,  0.], [1., 0.]), // 8
    ([-1.,  1.,  1.], [-1.,  0.,  0.], [1., 1.]),
    ([-1., -1., -1.], [-1.,  0.,  0.], [0., 0.]),
    ([-1.,  1., -1.], [-1.,  0.,  0.], [0., 1.]),
    // right face
    ([ 1., -1., -1.], [ 1.,  0.,  0.], [1., 0.]), // 12
    ([ 1.,  1., -1.], [ 1.,  0.,  0.], [1., 1.]),
    ([ 1., -1.,  1.], [ 1.,  0.,  0.], [0., 0.]),
    ([ 1.,  1.,  1.], [ 1.,  0.,  0.], [0., 1.]),
    // top face
    ([ 1.,  1.,  1.], [ 0.,  1.,  0.], [1., 0.]), // 16
    ([ 1.,  1., -1.], [ 0.,  1.,  0.], [1., 1.]),
    ([-1.,  1.,  1.], [ 0.,  1.,  0.], [0., 0.]),
    ([-1.,  1., -1.], [ 0.,  1.,  0.], [0., 1.]),
    // bottom face
    ([ 1., -1., -1.], [ 0., -1.,  0.], [1., 0.]), // 20
    ([ 1., -1.,  1.], [ 0., -1.,  0.], [1., 1.]),
    ([-1., -1., -1.], [ 0., -1.,  0.], [0., 0.]),
    ([-1., -1.,  1.], [ 0., -1.,  0.], [0., 1.]),
    ];

  let indices: &[u32] = &[
    0, 1, 2, 2, 1, 3, // front face
    4, 5, 6, 6, 5, 7, // back face
    8, 9, 10, 10, 9, 11, // left face
    12, 13, 14, 14, 13, 15, // right face
    16, 17, 18, 18, 17, 19, // top face
    20, 21, 22, 22, 21, 23, // bottom face
  ];

  Tess::new(Mode::Triangle, TessVertices::Fill(&vertices), indices)
}
